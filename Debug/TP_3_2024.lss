
TP_3_2024.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000bda  00000c6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000072  00800144  00800144  00000cb2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cb2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013fd  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b5b  00000000  00000000  000022e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b92  00000000  00000000  00002e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f4  00000000  00000000  000039d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b7  00000000  00000000  00003dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aa8  00000000  00000000  0000447f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00004f27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ed       	ldi	r30, 0xDA	; 218
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 34       	cpi	r26, 0x44	; 68
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e4       	ldi	r26, 0x44	; 68
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 3b       	cpi	r26, 0xB6	; 182
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  9e:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DHT11_init>:
#include "DHT11.h"

void DHT11_init(){
	DDRC |= (1<<PIN);	//P0 COMO SALIDA
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	87 b9       	out	0x07, r24	; 7
	DHT_PORT |= (1<<PIN);	//NIVEL ALTO
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	88 b9       	out	0x08, r24	; 8
  b2:	08 95       	ret

000000b4 <DHT11_read>:
}

uint8_t DHT11_read(uint8_t *temperatura, uint8_t *humedad){
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	00 d0       	rcall	.+0      	; 0xbe <DHT11_read+0xa>
  be:	00 d0       	rcall	.+0      	; 0xc0 <DHT11_read+0xc>
  c0:	1f 92       	push	r1
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	8c 01       	movw	r16, r24
		
		___________|__________________________________
			MCU					DHT11					*/
	
	//Paso 1, enviar un pulso en bajo durante 18ms
	DHT_PORT &= ~(1<<PIN); //Nivel bajo
  c8:	88 b1       	in	r24, 0x08	; 8
  ca:	8e 7f       	andi	r24, 0xFE	; 254
  cc:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	40 ee       	ldi	r20, 0xE0	; 224
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	40 40       	sbci	r20, 0x00	; 0
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <DHT11_read+0x20>
  dc:	00 c0       	rjmp	.+0      	; 0xde <DHT11_read+0x2a>
  de:	00 00       	nop
	_delay_ms(18);
	DHT_PORT |= (1<<PIN); //Nivel alto
  e0:	88 b1       	in	r24, 0x08	; 8
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	88 b9       	out	0x08, r24	; 8
	DHT_DDR &= ~(1<<PIN); //Pin como entrada
  e6:	87 b1       	in	r24, 0x07	; 7
  e8:	8e 7f       	andi	r24, 0xFE	; 254
  ea:	87 b9       	out	0x07, r24	; 7
	
	while(DHT_PIN & (1<<PIN)); ////Paso 2, esperamos 20 a 40us hasta que el DHT11 envíe 0
  ec:	30 99       	sbic	0x06, 0	; 6
  ee:	fe cf       	rjmp	.-4      	; 0xec <DHT11_read+0x38>
	while(!(DHT_PIN & (1<<PIN))); //Paso 3, esperamos 80us hasta que el DHT11 envie 1
  f0:	30 9b       	sbis	0x06, 0	; 6
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <DHT11_read+0x3c>
	while(DHT_PIN & (1<<PIN)); //Paso 4, esperamos 80us hasta que el DHT11 envie 0
  f4:	96 b1       	in	r25, 0x06	; 6
  f6:	89 2f       	mov	r24, r25
  f8:	81 70       	andi	r24, 0x01	; 1
  fa:	90 fd       	sbrc	r25, 0
  fc:	fb cf       	rjmp	.-10     	; 0xf4 <DHT11_read+0x40>
  fe:	a0 e0       	ldi	r26, 0x00	; 0
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	27 c0       	rjmp	.+78     	; 0x152 <DHT11_read+0x9e>
	
	//Paso 5, leemos los 5 bytes
	for(int j=0; j<5; j++){
		uint8_t result=0;
		for(int i=0; i<8; i++){
			while(!(DHT_PIN & (1<<PIN)));
 104:	30 9b       	sbis	0x06, 0	; 6
 106:	fe cf       	rjmp	.-4      	; 0x104 <DHT11_read+0x50>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	ea eb       	ldi	r30, 0xBA	; 186
 10a:	ea 95       	dec	r30
 10c:	f1 f7       	brne	.-4      	; 0x10a <DHT11_read+0x56>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <DHT11_read+0x5c>
			_delay_us(35);
			if(DHT_PIN & (1<<PIN)){
 110:	30 9b       	sbis	0x06, 0	; 6
 112:	0c c0       	rjmp	.+24     	; 0x12c <DHT11_read+0x78>
				result |= (1<<(7-i));
 114:	e7 e0       	ldi	r30, 0x07	; 7
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	e2 1b       	sub	r30, r18
 11a:	f3 0b       	sbc	r31, r19
 11c:	41 e0       	ldi	r20, 0x01	; 1
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <DHT11_read+0x72>
 122:	44 0f       	add	r20, r20
 124:	55 1f       	adc	r21, r21
 126:	ea 95       	dec	r30
 128:	e2 f7       	brpl	.-8      	; 0x122 <DHT11_read+0x6e>
 12a:	94 2b       	or	r25, r20
			}
			while(DHT_PIN & (1<<PIN));
 12c:	30 99       	sbic	0x06, 0	; 6
 12e:	fe cf       	rjmp	.-4      	; 0x12c <DHT11_read+0x78>
	while(DHT_PIN & (1<<PIN)); //Paso 4, esperamos 80us hasta que el DHT11 envie 0
	
	//Paso 5, leemos los 5 bytes
	for(int j=0; j<5; j++){
		uint8_t result=0;
		for(int i=0; i<8; i++){
 130:	2f 5f       	subi	r18, 0xFF	; 255
 132:	3f 4f       	sbci	r19, 0xFF	; 255
 134:	03 c0       	rjmp	.+6      	; 0x13c <DHT11_read+0x88>
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	28 30       	cpi	r18, 0x08	; 8
 13e:	31 05       	cpc	r19, r1
 140:	0c f3       	brlt	.-62     	; 0x104 <DHT11_read+0x50>
			if(DHT_PIN & (1<<PIN)){
				result |= (1<<(7-i));
			}
			while(DHT_PIN & (1<<PIN));
		}
		bits[j]=result;
 142:	e1 e0       	ldi	r30, 0x01	; 1
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	ec 0f       	add	r30, r28
 148:	fd 1f       	adc	r31, r29
 14a:	ea 0f       	add	r30, r26
 14c:	fb 1f       	adc	r31, r27
 14e:	90 83       	st	Z, r25
	while(DHT_PIN & (1<<PIN)); ////Paso 2, esperamos 20 a 40us hasta que el DHT11 envíe 0
	while(!(DHT_PIN & (1<<PIN))); //Paso 3, esperamos 80us hasta que el DHT11 envie 1
	while(DHT_PIN & (1<<PIN)); //Paso 4, esperamos 80us hasta que el DHT11 envie 0
	
	//Paso 5, leemos los 5 bytes
	for(int j=0; j<5; j++){
 150:	11 96       	adiw	r26, 0x01	; 1
 152:	a5 30       	cpi	r26, 0x05	; 5
 154:	b1 05       	cpc	r27, r1
 156:	7c f3       	brlt	.-34     	; 0x136 <DHT11_read+0x82>
			while(DHT_PIN & (1<<PIN));
		}
		bits[j]=result;
	}
	
	DHT_DDR |= (1<<PIN); //Pin como salida
 158:	97 b1       	in	r25, 0x07	; 7
 15a:	91 60       	ori	r25, 0x01	; 1
 15c:	97 b9       	out	0x07, r25	; 7
	DHT_PORT |= (1<<PIN); //Nivel alto
 15e:	98 b1       	in	r25, 0x08	; 8
 160:	91 60       	ori	r25, 0x01	; 1
 162:	98 b9       	out	0x08, r25	; 8
	
	listo = bits[0] + bits[1] + bits[2] + bits[3];
 164:	39 81       	ldd	r19, Y+1	; 0x01
 166:	9a 81       	ldd	r25, Y+2	; 0x02
 168:	4b 81       	ldd	r20, Y+3	; 0x03
 16a:	2c 81       	ldd	r18, Y+4	; 0x04
 16c:	93 0f       	add	r25, r19
 16e:	94 0f       	add	r25, r20
 170:	92 0f       	add	r25, r18
	
	if (listo == bits[4]){
 172:	2d 81       	ldd	r18, Y+5	; 0x05
 174:	92 13       	cpse	r25, r18
 176:	05 c0       	rjmp	.+10     	; 0x182 <DHT11_read+0xce>
		*temperatura = bits[2];
 178:	f8 01       	movw	r30, r16
 17a:	40 83       	st	Z, r20
		*humedad = bits[0];
 17c:	fb 01       	movw	r30, r22
 17e:	30 83       	st	Z, r19
		return 1;
 180:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{
		return 0;
	}
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	08 95       	ret

00000196 <I2C_Init>:
#include "i2c.h"
#include <util/twi.h>

void I2C_Init(void) {
	TWSR = 0x00;	// Prescaler en 0
 196:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 152;		// Frec SCL
 19a:	88 e9       	ldi	r24, 0x98	; 152
 19c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR = 0x04;	// Enable TWI
 1a0:	84 e0       	ldi	r24, 0x04	; 4
 1a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1a6:	08 95       	ret

000001a8 <I2C_Start>:
}

void I2C_Start(void) {
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 1a8:	84 ea       	ldi	r24, 0xA4	; 164
 1aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
 1ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b2:	88 23       	and	r24, r24
 1b4:	e4 f7       	brge	.-8      	; 0x1ae <I2C_Start+0x6>
}
 1b6:	08 95       	ret

000001b8 <I2C_Stop>:

void I2C_Stop(void) {
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 1b8:	84 e9       	ldi	r24, 0x94	; 148
 1ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1be:	08 95       	ret

000001c0 <I2C_Write>:
}

void I2C_Write(uint8_t data) {
	TWDR = data;
 1c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 1c4:	84 e8       	ldi	r24, 0x84	; 132
 1c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
 1ca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ce:	88 23       	and	r24, r24
 1d0:	e4 f7       	brge	.-8      	; 0x1ca <I2C_Write+0xa>
}
 1d2:	08 95       	ret

000001d4 <I2C_Read>:

uint8_t I2C_Read(uint8_t isLast) {
	if(isLast == 0)
 1d4:	81 11       	cpse	r24, r1
 1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <I2C_Read+0xc>
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 1d8:	84 ec       	ldi	r24, 0xC4	; 196
 1da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1de:	03 c0       	rjmp	.+6      	; 0x1e6 <I2C_Read+0x12>
	else
		TWCR = (1<<TWINT) | (1<<TWEN);
 1e0:	84 e8       	ldi	r24, 0x84	; 132
 1e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
 1e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ea:	88 23       	and	r24, r24
 1ec:	e4 f7       	brge	.-8      	; 0x1e6 <I2C_Read+0x12>
	return TWDR;
 1ee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1f2:	08 95       	ret

000001f4 <main>:

char msg[100];

int main(void)
{
	SerialPort_Init(BR9600); 			// Inicializo formato 8N1 y BAUDRATE = 9600bps
 1f4:	87 e6       	ldi	r24, 0x67	; 103
 1f6:	0e 94 84 02 	call	0x508	; 0x508 <SerialPort_Init>
	SerialPort_TX_Enable();				// Activo el Transmisor del Puerto Serie
 1fa:	0e 94 8e 02 	call	0x51c	; 0x51c <SerialPort_TX_Enable>
	SerialPort_RX_Enable();				// Activo el Receptor del Puerto Serie
 1fe:	0e 94 94 02 	call	0x528	; 0x528 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();	// Activo Interrupción de recepcion.
 202:	0e 94 9a 02 	call	0x534	; 0x534 <SerialPort_RX_Interrupt_Enable>
	Timer1_Init();
 206:	0e 94 ca 02 	call	0x594	; 0x594 <Timer1_Init>
	DHT11_init();
 20a:	0e 94 53 00 	call	0xa6	; 0xa6 <DHT11_init>
	RTC_Init();
 20e:	0e 94 b7 01 	call	0x36e	; 0x36e <RTC_Init>

	// Fecha y hora
	RTC_SetDate(24,6,24);	// FECHA= 24/06/24
 212:	48 e1       	ldi	r20, 0x18	; 24
 214:	66 e0       	ldi	r22, 0x06	; 6
 216:	88 e1       	ldi	r24, 0x18	; 24
 218:	0e 94 61 02 	call	0x4c2	; 0x4c2 <RTC_SetDate>
	RTC_SetTime(14,30,12);	// HORA= 14:30:12
 21c:	4c e0       	ldi	r20, 0x0C	; 12
 21e:	6e e1       	ldi	r22, 0x1E	; 30
 220:	8e e0       	ldi	r24, 0x0E	; 14
 222:	0e 94 3e 02 	call	0x47c	; 0x47c <RTC_SetTime>
	
	sei();					// Activo la mascara global de interrupciones (Bit I del SREG en 1)
 226:	78 94       	sei
	
	while(1)
	{	
		//Encuesto sensor cada 2seg
		if (getFlag_2segundos()){
 228:	0e 94 c7 02 	call	0x58e	; 0x58e <getFlag_2segundos>
 22c:	88 23       	and	r24, r24
 22e:	f1 f0       	breq	.+60     	; 0x26c <main+0x78>
			sensor_ok = DHT11_read(&temperatura,&humedad);
 230:	6f ea       	ldi	r22, 0xAF	; 175
 232:	71 e0       	ldi	r23, 0x01	; 1
 234:	83 eb       	ldi	r24, 0xB3	; 179
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	0e 94 5a 00 	call	0xb4	; 0xb4 <DHT11_read>
 23c:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <sensor_ok>
			RTC_GetDate(&day,&month,&year);
 240:	41 eb       	ldi	r20, 0xB1	; 177
 242:	51 e0       	ldi	r21, 0x01	; 1
 244:	69 e4       	ldi	r22, 0x49	; 73
 246:	71 e0       	ldi	r23, 0x01	; 1
 248:	82 eb       	ldi	r24, 0xB2	; 178
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <RTC_GetDate>
			RTC_GetTime(&hours,&minutes,&seconds);
 250:	40 eb       	ldi	r20, 0xB0	; 176
 252:	51 e0       	ldi	r21, 0x01	; 1
 254:	64 eb       	ldi	r22, 0xB4	; 180
 256:	71 e0       	ldi	r23, 0x01	; 1
 258:	85 eb       	ldi	r24, 0xB5	; 181
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 c5 01 	call	0x38a	; 0x38a <RTC_GetTime>
			setFlag_2segundos(0);
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 c4 02 	call	0x588	; 0x588 <setFlag_2segundos>
			mostrar=1;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
		}
		if(stop && mostrar){
 26c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 270:	88 23       	and	r24, r24
 272:	d1 f2       	breq	.-76     	; 0x228 <main+0x34>
 274:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
 278:	88 23       	and	r24, r24
 27a:	b1 f2       	breq	.-84     	; 0x228 <main+0x34>
			if(sensor_ok == 1){		
 27c:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <sensor_ok>
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	b1 f5       	brne	.+108    	; 0x2f0 <main+0xfc>
				sprintf(msg, "TEMP:%2d°C HUM:%2d FECHA:%d/%d/%d HORA:%2d:%2d:%2d \r\n",temperatura,humedad,day,month,year,hours,minutes,seconds);
 284:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <seconds>
 288:	1f 92       	push	r1
 28a:	8f 93       	push	r24
 28c:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <minutes>
 290:	1f 92       	push	r1
 292:	8f 93       	push	r24
 294:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <hours>
 298:	1f 92       	push	r1
 29a:	8f 93       	push	r24
 29c:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <year>
 2a0:	1f 92       	push	r1
 2a2:	8f 93       	push	r24
 2a4:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <month>
 2a8:	1f 92       	push	r1
 2aa:	8f 93       	push	r24
 2ac:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <day>
 2b0:	1f 92       	push	r1
 2b2:	8f 93       	push	r24
 2b4:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <humedad>
 2b8:	1f 92       	push	r1
 2ba:	8f 93       	push	r24
 2bc:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <temperatura>
 2c0:	1f 92       	push	r1
 2c2:	8f 93       	push	r24
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	9f 93       	push	r25
 2ca:	8f 93       	push	r24
 2cc:	8a e4       	ldi	r24, 0x4A	; 74
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	9f 93       	push	r25
 2d2:	8f 93       	push	r24
 2d4:	0e 94 01 03 	call	0x602	; 0x602 <sprintf>
				SerialPort_Send_String(msg);
 2d8:	8a e4       	ldi	r24, 0x4A	; 74
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	0e 94 a8 02 	call	0x550	; 0x550 <SerialPort_Send_String>
 2e0:	8d b7       	in	r24, 0x3d	; 61
 2e2:	9e b7       	in	r25, 0x3e	; 62
 2e4:	44 96       	adiw	r24, 0x14	; 20
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	f8 94       	cli
 2ea:	9e bf       	out	0x3e, r25	; 62
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	8d bf       	out	0x3d, r24	; 61
			}
			mostrar=0;
 2f0:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
 2f4:	99 cf       	rjmp	.-206    	; 0x228 <main+0x34>

000002f6 <__vector_18>:
		}
	}
	return 0;
}

ISR(USART_RX_vect){
 2f6:	1f 92       	push	r1
 2f8:	0f 92       	push	r0
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	0f 92       	push	r0
 2fe:	11 24       	eor	r1, r1
 300:	2f 93       	push	r18
 302:	3f 93       	push	r19
 304:	4f 93       	push	r20
 306:	5f 93       	push	r21
 308:	6f 93       	push	r22
 30a:	7f 93       	push	r23
 30c:	8f 93       	push	r24
 30e:	9f 93       	push	r25
 310:	af 93       	push	r26
 312:	bf 93       	push	r27
 314:	ef 93       	push	r30
 316:	ff 93       	push	r31
	RX_Buffer = UDR0;
 318:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 31c:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <RX_Buffer>
	if((RX_Buffer == 's')||(RX_Buffer == 'S')){
 320:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <RX_Buffer>
 324:	83 37       	cpi	r24, 0x73	; 115
 326:	21 f0       	breq	.+8      	; 0x330 <__vector_18+0x3a>
 328:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <RX_Buffer>
 32c:	83 35       	cpi	r24, 0x53	; 83
 32e:	71 f4       	brne	.+28     	; 0x34c <__vector_18+0x56>
		if(stop){
 330:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 334:	88 23       	and	r24, r24
 336:	39 f0       	breq	.+14     	; 0x346 <__vector_18+0x50>
			SerialPort_Send_String("PAUSADO  \r\n");
 338:	87 e3       	ldi	r24, 0x37	; 55
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 a8 02 	call	0x550	; 0x550 <SerialPort_Send_String>
			stop = 0;
 340:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 344:	03 c0       	rjmp	.+6      	; 0x34c <__vector_18+0x56>
		} else {
			stop = 1;
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
}
 34c:	ff 91       	pop	r31
 34e:	ef 91       	pop	r30
 350:	bf 91       	pop	r27
 352:	af 91       	pop	r26
 354:	9f 91       	pop	r25
 356:	8f 91       	pop	r24
 358:	7f 91       	pop	r23
 35a:	6f 91       	pop	r22
 35c:	5f 91       	pop	r21
 35e:	4f 91       	pop	r20
 360:	3f 91       	pop	r19
 362:	2f 91       	pop	r18
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <RTC_Init>:
#include "rtc.h"
#include "i2c.h"

void RTC_Init(void) {
	I2C_Init();
 36e:	0e 94 cb 00 	call	0x196	; 0x196 <I2C_Init>
 372:	08 95       	ret

00000374 <BCD_to_DEC>:

	I2C_Stop();
}

uint8_t BCD_to_DEC(uint8_t val) {
	return ((val / 16 * 10) + (val % 16));
 374:	98 2f       	mov	r25, r24
 376:	92 95       	swap	r25
 378:	9f 70       	andi	r25, 0x0F	; 15
 37a:	99 0f       	add	r25, r25
 37c:	29 2f       	mov	r18, r25
 37e:	22 0f       	add	r18, r18
 380:	22 0f       	add	r18, r18
 382:	92 0f       	add	r25, r18
 384:	8f 70       	andi	r24, 0x0F	; 15
}
 386:	89 0f       	add	r24, r25
 388:	08 95       	ret

0000038a <RTC_GetTime>:
	I2C_Write(DEC_to_BCD(minutes));
	I2C_Write(DEC_to_BCD(hours));
	I2C_Stop();
}

void RTC_GetTime(uint8_t* hours, uint8_t* minutes, uint8_t* seconds) {
 38a:	ef 92       	push	r14
 38c:	ff 92       	push	r15
 38e:	0f 93       	push	r16
 390:	1f 93       	push	r17
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	ec 01       	movw	r28, r24
 398:	8b 01       	movw	r16, r22
 39a:	7a 01       	movw	r14, r20
	I2C_Start();
 39c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | 0); // Para escribir
 3a0:	80 ed       	ldi	r24, 0xD0	; 208
 3a2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <I2C_Write>
	I2C_Write(0x00); // Empiezo en registro 0x00 (Segundos)
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <I2C_Write>
	I2C_Start();
 3ac:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | 1); // Para leer
 3b0:	81 ed       	ldi	r24, 0xD1	; 209
 3b2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <I2C_Write>

	*seconds = BCD_to_DEC(I2C_Read(0));
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <I2C_Read>
 3bc:	0e 94 ba 01 	call	0x374	; 0x374 <BCD_to_DEC>
 3c0:	f7 01       	movw	r30, r14
 3c2:	80 83       	st	Z, r24
	*minutes = BCD_to_DEC(I2C_Read(0));
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <I2C_Read>
 3ca:	0e 94 ba 01 	call	0x374	; 0x374 <BCD_to_DEC>
 3ce:	f8 01       	movw	r30, r16
 3d0:	80 83       	st	Z, r24
	*hours = BCD_to_DEC(I2C_Read(1));
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <I2C_Read>
 3d8:	0e 94 ba 01 	call	0x374	; 0x374 <BCD_to_DEC>
 3dc:	88 83       	st	Y, r24

	I2C_Stop();
 3de:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_Stop>
}
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	1f 91       	pop	r17
 3e8:	0f 91       	pop	r16
 3ea:	ff 90       	pop	r15
 3ec:	ef 90       	pop	r14
 3ee:	08 95       	ret

000003f0 <RTC_GetDate>:
	I2C_Write(DEC_to_BCD(month));
	I2C_Write(DEC_to_BCD(year));
	I2C_Stop();
}

void RTC_GetDate(uint8_t* day, uint8_t* month, uint8_t* year) {
 3f0:	ef 92       	push	r14
 3f2:	ff 92       	push	r15
 3f4:	0f 93       	push	r16
 3f6:	1f 93       	push	r17
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	7c 01       	movw	r14, r24
 3fe:	8b 01       	movw	r16, r22
 400:	ea 01       	movw	r28, r20
	I2C_Start();
 402:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | 0); // Para escribir
 406:	80 ed       	ldi	r24, 0xD0	; 208
 408:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <I2C_Write>
	I2C_Write(0x04); // Empiezo en registro 0x04 (Dia)
 40c:	84 e0       	ldi	r24, 0x04	; 4
 40e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <I2C_Write>
	I2C_Start();
 412:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | 1); // Para leer
 416:	81 ed       	ldi	r24, 0xD1	; 209
 418:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <I2C_Write>

	*day = BCD_to_DEC(I2C_Read(0));
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <I2C_Read>
 422:	0e 94 ba 01 	call	0x374	; 0x374 <BCD_to_DEC>
 426:	f7 01       	movw	r30, r14
 428:	80 83       	st	Z, r24
	*month = BCD_to_DEC(I2C_Read(0));
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <I2C_Read>
 430:	0e 94 ba 01 	call	0x374	; 0x374 <BCD_to_DEC>
 434:	f8 01       	movw	r30, r16
 436:	80 83       	st	Z, r24
	*year = BCD_to_DEC(I2C_Read(1));
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <I2C_Read>
 43e:	0e 94 ba 01 	call	0x374	; 0x374 <BCD_to_DEC>
 442:	88 83       	st	Y, r24

	I2C_Stop();
 444:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_Stop>
}
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	1f 91       	pop	r17
 44e:	0f 91       	pop	r16
 450:	ff 90       	pop	r15
 452:	ef 90       	pop	r14
 454:	08 95       	ret

00000456 <DEC_to_BCD>:
uint8_t BCD_to_DEC(uint8_t val) {
	return ((val / 16 * 10) + (val % 16));
}

uint8_t DEC_to_BCD(uint8_t val) {
	return ((val / 10 * 16) + (val % 10));
 456:	9d ec       	ldi	r25, 0xCD	; 205
 458:	89 9f       	mul	r24, r25
 45a:	91 2d       	mov	r25, r1
 45c:	11 24       	eor	r1, r1
 45e:	96 95       	lsr	r25
 460:	96 95       	lsr	r25
 462:	96 95       	lsr	r25
 464:	39 2f       	mov	r19, r25
 466:	33 0f       	add	r19, r19
 468:	23 2f       	mov	r18, r19
 46a:	22 0f       	add	r18, r18
 46c:	22 0f       	add	r18, r18
 46e:	23 0f       	add	r18, r19
 470:	82 1b       	sub	r24, r18
 472:	20 e1       	ldi	r18, 0x10	; 16
 474:	92 9f       	mul	r25, r18
 476:	80 0d       	add	r24, r0
 478:	11 24       	eor	r1, r1
 47a:	08 95       	ret

0000047c <RTC_SetTime>:

void RTC_Init(void) {
	I2C_Init();
}

void RTC_SetTime(uint8_t hours, uint8_t minutes, uint8_t seconds){
 47c:	1f 93       	push	r17
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	c8 2f       	mov	r28, r24
 484:	d6 2f       	mov	r29, r22
 486:	14 2f       	mov	r17, r20
	I2C_Start();
 488:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | 0); // Para escribir
 48c:	80 ed       	ldi	r24, 0xD0	; 208
 48e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <I2C_Write>
	I2C_Write(0x00); // Empiezo en registro 0x00 (Segundos)
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <I2C_Write>
	I2C_Write(DEC_to_BCD(seconds));
 498:	81 2f       	mov	r24, r17
 49a:	0e 94 2b 02 	call	0x456	; 0x456 <DEC_to_BCD>
 49e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <I2C_Write>
	I2C_Write(DEC_to_BCD(minutes));
 4a2:	8d 2f       	mov	r24, r29
 4a4:	0e 94 2b 02 	call	0x456	; 0x456 <DEC_to_BCD>
 4a8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <I2C_Write>
	I2C_Write(DEC_to_BCD(hours));
 4ac:	8c 2f       	mov	r24, r28
 4ae:	0e 94 2b 02 	call	0x456	; 0x456 <DEC_to_BCD>
 4b2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <I2C_Write>
	I2C_Stop();
 4b6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_Stop>
}
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	1f 91       	pop	r17
 4c0:	08 95       	ret

000004c2 <RTC_SetDate>:
	*hours = BCD_to_DEC(I2C_Read(1));

	I2C_Stop();
}

void RTC_SetDate(uint8_t day, uint8_t month, uint8_t year){
 4c2:	1f 93       	push	r17
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	18 2f       	mov	r17, r24
 4ca:	d6 2f       	mov	r29, r22
 4cc:	c4 2f       	mov	r28, r20
	I2C_Start();
 4ce:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Start>
	I2C_Write((DS3231_ADDRESS << 1) | 0); // Para escribir
 4d2:	80 ed       	ldi	r24, 0xD0	; 208
 4d4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <I2C_Write>
	I2C_Write(0x04); // Empiezo en registro 0x04 (Dia)
 4d8:	84 e0       	ldi	r24, 0x04	; 4
 4da:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <I2C_Write>
	I2C_Write(DEC_to_BCD(day));
 4de:	81 2f       	mov	r24, r17
 4e0:	0e 94 2b 02 	call	0x456	; 0x456 <DEC_to_BCD>
 4e4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <I2C_Write>
	I2C_Write(DEC_to_BCD(month));
 4e8:	8d 2f       	mov	r24, r29
 4ea:	0e 94 2b 02 	call	0x456	; 0x456 <DEC_to_BCD>
 4ee:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <I2C_Write>
	I2C_Write(DEC_to_BCD(year));
 4f2:	8c 2f       	mov	r24, r28
 4f4:	0e 94 2b 02 	call	0x456	; 0x456 <DEC_to_BCD>
 4f8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <I2C_Write>
	I2C_Stop();
 4fc:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_Stop>
}
 500:	df 91       	pop	r29
 502:	cf 91       	pop	r28
 504:	1f 91       	pop	r17
 506:	08 95       	ret

00000508 <SerialPort_Init>:

}

void SerialPort_TX_Interrupt_Disable(void)
{
	UCSR0B &=~(1<<UDRIE0);
 508:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 50c:	96 e0       	ldi	r25, 0x06	; 6
 50e:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 512:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 516:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 51a:	08 95       	ret

0000051c <SerialPort_TX_Enable>:
 51c:	e1 ec       	ldi	r30, 0xC1	; 193
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	80 81       	ld	r24, Z
 522:	88 60       	ori	r24, 0x08	; 8
 524:	80 83       	st	Z, r24
 526:	08 95       	ret

00000528 <SerialPort_RX_Enable>:


// Inicialización de Receptor

void SerialPort_RX_Enable(void){
	UCSR0B |= (1<<RXEN0);
 528:	e1 ec       	ldi	r30, 0xC1	; 193
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	80 81       	ld	r24, Z
 52e:	80 61       	ori	r24, 0x10	; 16
 530:	80 83       	st	Z, r24
 532:	08 95       	ret

00000534 <SerialPort_RX_Interrupt_Enable>:
}

void SerialPort_RX_Interrupt_Enable(void){
	UCSR0B |= (1<<RXCIE0);
 534:	e1 ec       	ldi	r30, 0xC1	; 193
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	80 68       	ori	r24, 0x80	; 128
 53c:	80 83       	st	Z, r24
 53e:	08 95       	ret

00000540 <SerialPort_Wait_For_TX_Buffer_Free>:
// Transmisión

// Espera hasta que el buffer de TX este libre.
void SerialPort_Wait_For_TX_Buffer_Free(void){
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
 540:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 544:	85 ff       	sbrs	r24, 5
 546:	fc cf       	rjmp	.-8      	; 0x540 <SerialPort_Wait_For_TX_Buffer_Free>
}
 548:	08 95       	ret

0000054a <SerialPort_Send_Data>:

void SerialPort_Send_Data(char data){
	UDR0 = data;
 54a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 54e:	08 95       	ret

00000550 <SerialPort_Send_String>:
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
 550:	ef 92       	push	r14
 552:	ff 92       	push	r15
 554:	0f 93       	push	r16
 556:	1f 93       	push	r17
 558:	cf 93       	push	r28
 55a:	7c 01       	movw	r14, r24
	uint8_t i = 0;
 55c:	c0 e0       	ldi	r28, 0x00	; 0
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 55e:	07 c0       	rjmp	.+14     	; 0x56e <SerialPort_Send_String+0x1e>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
 560:	0e 94 a0 02 	call	0x540	; 0x540 <SerialPort_Wait_For_TX_Buffer_Free>
		SerialPort_Send_Data(msg[i]);
 564:	f8 01       	movw	r30, r16
 566:	80 81       	ld	r24, Z
 568:	0e 94 a5 02 	call	0x54a	; 0x54a <SerialPort_Send_Data>
		i++;
 56c:	cf 5f       	subi	r28, 0xFF	; 255
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 56e:	87 01       	movw	r16, r14
 570:	0c 0f       	add	r16, r28
 572:	11 1d       	adc	r17, r1
 574:	f8 01       	movw	r30, r16
 576:	80 81       	ld	r24, Z
 578:	81 11       	cpse	r24, r1
 57a:	f2 cf       	rjmp	.-28     	; 0x560 <SerialPort_Send_String+0x10>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
		SerialPort_Send_Data(msg[i]);
		i++;
	}
}
 57c:	cf 91       	pop	r28
 57e:	1f 91       	pop	r17
 580:	0f 91       	pop	r16
 582:	ff 90       	pop	r15
 584:	ef 90       	pop	r14
 586:	08 95       	ret

00000588 <setFlag_2segundos>:
#include "TIMER1.h"

static uint8_t FLAG_2segundos = 0;

void setFlag_2segundos(uint8_t Flag_2segundos){
	FLAG_2segundos = Flag_2segundos;
 588:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <FLAG_2segundos>
 58c:	08 95       	ret

0000058e <getFlag_2segundos>:
}

uint8_t getFlag_2segundos(){
	return FLAG_2segundos;
}
 58e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <FLAG_2segundos>
 592:	08 95       	ret

00000594 <Timer1_Init>:

void Timer1_Init(void) {
	TCCR1B |= (1 << WGM12);
 594:	e1 e8       	ldi	r30, 0x81	; 129
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	80 81       	ld	r24, Z
 59a:	88 60       	ori	r24, 0x08	; 8
 59c:	80 83       	st	Z, r24
	OCR1A = 249;
 59e:	89 ef       	ldi	r24, 0xF9	; 249
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 5a6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= (1 << OCIE1A);
 5aa:	af e6       	ldi	r26, 0x6F	; 111
 5ac:	b0 e0       	ldi	r27, 0x00	; 0
 5ae:	8c 91       	ld	r24, X
 5b0:	82 60       	ori	r24, 0x02	; 2
 5b2:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS11) | (1 << CS10);
 5b4:	80 81       	ld	r24, Z
 5b6:	83 60       	ori	r24, 0x03	; 3
 5b8:	80 83       	st	Z, r24
 5ba:	08 95       	ret

000005bc <__vector_11>:
}

ISR(TIMER1_COMPA_vect) {
 5bc:	1f 92       	push	r1
 5be:	0f 92       	push	r0
 5c0:	0f b6       	in	r0, 0x3f	; 63
 5c2:	0f 92       	push	r0
 5c4:	11 24       	eor	r1, r1
 5c6:	2f 93       	push	r18
 5c8:	8f 93       	push	r24
 5ca:	9f 93       	push	r25
	static uint16_t contador_2segundos = 0;
	if (++contador_2segundos == 2000) {
 5cc:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <contador_2segundos.1620>
 5d0:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <contador_2segundos.1620+0x1>
 5d4:	01 96       	adiw	r24, 0x01	; 1
 5d6:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <contador_2segundos.1620+0x1>
 5da:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <contador_2segundos.1620>
 5de:	80 3d       	cpi	r24, 0xD0	; 208
 5e0:	97 40       	sbci	r25, 0x07	; 7
 5e2:	39 f4       	brne	.+14     	; 0x5f2 <__vector_11+0x36>
		FLAG_2segundos = 1;
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <FLAG_2segundos>
		contador_2segundos = 0;
 5ea:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <contador_2segundos.1620+0x1>
 5ee:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <contador_2segundos.1620>
	}
 5f2:	9f 91       	pop	r25
 5f4:	8f 91       	pop	r24
 5f6:	2f 91       	pop	r18
 5f8:	0f 90       	pop	r0
 5fa:	0f be       	out	0x3f, r0	; 63
 5fc:	0f 90       	pop	r0
 5fe:	1f 90       	pop	r1
 600:	18 95       	reti

00000602 <sprintf>:
 602:	ae e0       	ldi	r26, 0x0E	; 14
 604:	b0 e0       	ldi	r27, 0x00	; 0
 606:	e7 e0       	ldi	r30, 0x07	; 7
 608:	f3 e0       	ldi	r31, 0x03	; 3
 60a:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__prologue_saves__+0x1c>
 60e:	0d 89       	ldd	r16, Y+21	; 0x15
 610:	1e 89       	ldd	r17, Y+22	; 0x16
 612:	86 e0       	ldi	r24, 0x06	; 6
 614:	8c 83       	std	Y+4, r24	; 0x04
 616:	1a 83       	std	Y+2, r17	; 0x02
 618:	09 83       	std	Y+1, r16	; 0x01
 61a:	8f ef       	ldi	r24, 0xFF	; 255
 61c:	9f e7       	ldi	r25, 0x7F	; 127
 61e:	9e 83       	std	Y+6, r25	; 0x06
 620:	8d 83       	std	Y+5, r24	; 0x05
 622:	ae 01       	movw	r20, r28
 624:	47 5e       	subi	r20, 0xE7	; 231
 626:	5f 4f       	sbci	r21, 0xFF	; 255
 628:	6f 89       	ldd	r22, Y+23	; 0x17
 62a:	78 8d       	ldd	r23, Y+24	; 0x18
 62c:	ce 01       	movw	r24, r28
 62e:	01 96       	adiw	r24, 0x01	; 1
 630:	0e 94 23 03 	call	0x646	; 0x646 <vfprintf>
 634:	ef 81       	ldd	r30, Y+7	; 0x07
 636:	f8 85       	ldd	r31, Y+8	; 0x08
 638:	e0 0f       	add	r30, r16
 63a:	f1 1f       	adc	r31, r17
 63c:	10 82       	st	Z, r1
 63e:	2e 96       	adiw	r28, 0x0e	; 14
 640:	e4 e0       	ldi	r30, 0x04	; 4
 642:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__epilogue_restores__+0x1c>

00000646 <vfprintf>:
 646:	ab e0       	ldi	r26, 0x0B	; 11
 648:	b0 e0       	ldi	r27, 0x00	; 0
 64a:	e9 e2       	ldi	r30, 0x29	; 41
 64c:	f3 e0       	ldi	r31, 0x03	; 3
 64e:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__prologue_saves__>
 652:	6c 01       	movw	r12, r24
 654:	7b 01       	movw	r14, r22
 656:	8a 01       	movw	r16, r20
 658:	fc 01       	movw	r30, r24
 65a:	17 82       	std	Z+7, r1	; 0x07
 65c:	16 82       	std	Z+6, r1	; 0x06
 65e:	83 81       	ldd	r24, Z+3	; 0x03
 660:	81 ff       	sbrs	r24, 1
 662:	cc c1       	rjmp	.+920    	; 0x9fc <__stack+0xfd>
 664:	ce 01       	movw	r24, r28
 666:	01 96       	adiw	r24, 0x01	; 1
 668:	3c 01       	movw	r6, r24
 66a:	f6 01       	movw	r30, r12
 66c:	93 81       	ldd	r25, Z+3	; 0x03
 66e:	f7 01       	movw	r30, r14
 670:	93 fd       	sbrc	r25, 3
 672:	85 91       	lpm	r24, Z+
 674:	93 ff       	sbrs	r25, 3
 676:	81 91       	ld	r24, Z+
 678:	7f 01       	movw	r14, r30
 67a:	88 23       	and	r24, r24
 67c:	09 f4       	brne	.+2      	; 0x680 <vfprintf+0x3a>
 67e:	ba c1       	rjmp	.+884    	; 0x9f4 <__stack+0xf5>
 680:	85 32       	cpi	r24, 0x25	; 37
 682:	39 f4       	brne	.+14     	; 0x692 <vfprintf+0x4c>
 684:	93 fd       	sbrc	r25, 3
 686:	85 91       	lpm	r24, Z+
 688:	93 ff       	sbrs	r25, 3
 68a:	81 91       	ld	r24, Z+
 68c:	7f 01       	movw	r14, r30
 68e:	85 32       	cpi	r24, 0x25	; 37
 690:	29 f4       	brne	.+10     	; 0x69c <vfprintf+0x56>
 692:	b6 01       	movw	r22, r12
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	0e 94 1a 05 	call	0xa34	; 0xa34 <fputc>
 69a:	e7 cf       	rjmp	.-50     	; 0x66a <vfprintf+0x24>
 69c:	91 2c       	mov	r9, r1
 69e:	21 2c       	mov	r2, r1
 6a0:	31 2c       	mov	r3, r1
 6a2:	ff e1       	ldi	r31, 0x1F	; 31
 6a4:	f3 15       	cp	r31, r3
 6a6:	d8 f0       	brcs	.+54     	; 0x6de <vfprintf+0x98>
 6a8:	8b 32       	cpi	r24, 0x2B	; 43
 6aa:	79 f0       	breq	.+30     	; 0x6ca <vfprintf+0x84>
 6ac:	38 f4       	brcc	.+14     	; 0x6bc <vfprintf+0x76>
 6ae:	80 32       	cpi	r24, 0x20	; 32
 6b0:	79 f0       	breq	.+30     	; 0x6d0 <vfprintf+0x8a>
 6b2:	83 32       	cpi	r24, 0x23	; 35
 6b4:	a1 f4       	brne	.+40     	; 0x6de <vfprintf+0x98>
 6b6:	23 2d       	mov	r18, r3
 6b8:	20 61       	ori	r18, 0x10	; 16
 6ba:	1d c0       	rjmp	.+58     	; 0x6f6 <vfprintf+0xb0>
 6bc:	8d 32       	cpi	r24, 0x2D	; 45
 6be:	61 f0       	breq	.+24     	; 0x6d8 <vfprintf+0x92>
 6c0:	80 33       	cpi	r24, 0x30	; 48
 6c2:	69 f4       	brne	.+26     	; 0x6de <vfprintf+0x98>
 6c4:	23 2d       	mov	r18, r3
 6c6:	21 60       	ori	r18, 0x01	; 1
 6c8:	16 c0       	rjmp	.+44     	; 0x6f6 <vfprintf+0xb0>
 6ca:	83 2d       	mov	r24, r3
 6cc:	82 60       	ori	r24, 0x02	; 2
 6ce:	38 2e       	mov	r3, r24
 6d0:	e3 2d       	mov	r30, r3
 6d2:	e4 60       	ori	r30, 0x04	; 4
 6d4:	3e 2e       	mov	r3, r30
 6d6:	2a c0       	rjmp	.+84     	; 0x72c <vfprintf+0xe6>
 6d8:	f3 2d       	mov	r31, r3
 6da:	f8 60       	ori	r31, 0x08	; 8
 6dc:	1d c0       	rjmp	.+58     	; 0x718 <vfprintf+0xd2>
 6de:	37 fc       	sbrc	r3, 7
 6e0:	2d c0       	rjmp	.+90     	; 0x73c <vfprintf+0xf6>
 6e2:	20 ed       	ldi	r18, 0xD0	; 208
 6e4:	28 0f       	add	r18, r24
 6e6:	2a 30       	cpi	r18, 0x0A	; 10
 6e8:	40 f0       	brcs	.+16     	; 0x6fa <vfprintf+0xb4>
 6ea:	8e 32       	cpi	r24, 0x2E	; 46
 6ec:	b9 f4       	brne	.+46     	; 0x71c <vfprintf+0xd6>
 6ee:	36 fc       	sbrc	r3, 6
 6f0:	81 c1       	rjmp	.+770    	; 0x9f4 <__stack+0xf5>
 6f2:	23 2d       	mov	r18, r3
 6f4:	20 64       	ori	r18, 0x40	; 64
 6f6:	32 2e       	mov	r3, r18
 6f8:	19 c0       	rjmp	.+50     	; 0x72c <vfprintf+0xe6>
 6fa:	36 fe       	sbrs	r3, 6
 6fc:	06 c0       	rjmp	.+12     	; 0x70a <vfprintf+0xc4>
 6fe:	8a e0       	ldi	r24, 0x0A	; 10
 700:	98 9e       	mul	r9, r24
 702:	20 0d       	add	r18, r0
 704:	11 24       	eor	r1, r1
 706:	92 2e       	mov	r9, r18
 708:	11 c0       	rjmp	.+34     	; 0x72c <vfprintf+0xe6>
 70a:	ea e0       	ldi	r30, 0x0A	; 10
 70c:	2e 9e       	mul	r2, r30
 70e:	20 0d       	add	r18, r0
 710:	11 24       	eor	r1, r1
 712:	22 2e       	mov	r2, r18
 714:	f3 2d       	mov	r31, r3
 716:	f0 62       	ori	r31, 0x20	; 32
 718:	3f 2e       	mov	r3, r31
 71a:	08 c0       	rjmp	.+16     	; 0x72c <vfprintf+0xe6>
 71c:	8c 36       	cpi	r24, 0x6C	; 108
 71e:	21 f4       	brne	.+8      	; 0x728 <vfprintf+0xe2>
 720:	83 2d       	mov	r24, r3
 722:	80 68       	ori	r24, 0x80	; 128
 724:	38 2e       	mov	r3, r24
 726:	02 c0       	rjmp	.+4      	; 0x72c <vfprintf+0xe6>
 728:	88 36       	cpi	r24, 0x68	; 104
 72a:	41 f4       	brne	.+16     	; 0x73c <vfprintf+0xf6>
 72c:	f7 01       	movw	r30, r14
 72e:	93 fd       	sbrc	r25, 3
 730:	85 91       	lpm	r24, Z+
 732:	93 ff       	sbrs	r25, 3
 734:	81 91       	ld	r24, Z+
 736:	7f 01       	movw	r14, r30
 738:	81 11       	cpse	r24, r1
 73a:	b3 cf       	rjmp	.-154    	; 0x6a2 <vfprintf+0x5c>
 73c:	98 2f       	mov	r25, r24
 73e:	9f 7d       	andi	r25, 0xDF	; 223
 740:	95 54       	subi	r25, 0x45	; 69
 742:	93 30       	cpi	r25, 0x03	; 3
 744:	28 f4       	brcc	.+10     	; 0x750 <vfprintf+0x10a>
 746:	0c 5f       	subi	r16, 0xFC	; 252
 748:	1f 4f       	sbci	r17, 0xFF	; 255
 74a:	9f e3       	ldi	r25, 0x3F	; 63
 74c:	99 83       	std	Y+1, r25	; 0x01
 74e:	0d c0       	rjmp	.+26     	; 0x76a <vfprintf+0x124>
 750:	83 36       	cpi	r24, 0x63	; 99
 752:	31 f0       	breq	.+12     	; 0x760 <vfprintf+0x11a>
 754:	83 37       	cpi	r24, 0x73	; 115
 756:	71 f0       	breq	.+28     	; 0x774 <vfprintf+0x12e>
 758:	83 35       	cpi	r24, 0x53	; 83
 75a:	09 f0       	breq	.+2      	; 0x75e <vfprintf+0x118>
 75c:	59 c0       	rjmp	.+178    	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 75e:	21 c0       	rjmp	.+66     	; 0x7a2 <vfprintf+0x15c>
 760:	f8 01       	movw	r30, r16
 762:	80 81       	ld	r24, Z
 764:	89 83       	std	Y+1, r24	; 0x01
 766:	0e 5f       	subi	r16, 0xFE	; 254
 768:	1f 4f       	sbci	r17, 0xFF	; 255
 76a:	88 24       	eor	r8, r8
 76c:	83 94       	inc	r8
 76e:	91 2c       	mov	r9, r1
 770:	53 01       	movw	r10, r6
 772:	13 c0       	rjmp	.+38     	; 0x79a <vfprintf+0x154>
 774:	28 01       	movw	r4, r16
 776:	f2 e0       	ldi	r31, 0x02	; 2
 778:	4f 0e       	add	r4, r31
 77a:	51 1c       	adc	r5, r1
 77c:	f8 01       	movw	r30, r16
 77e:	a0 80       	ld	r10, Z
 780:	b1 80       	ldd	r11, Z+1	; 0x01
 782:	36 fe       	sbrs	r3, 6
 784:	03 c0       	rjmp	.+6      	; 0x78c <vfprintf+0x146>
 786:	69 2d       	mov	r22, r9
 788:	70 e0       	ldi	r23, 0x00	; 0
 78a:	02 c0       	rjmp	.+4      	; 0x790 <vfprintf+0x14a>
 78c:	6f ef       	ldi	r22, 0xFF	; 255
 78e:	7f ef       	ldi	r23, 0xFF	; 255
 790:	c5 01       	movw	r24, r10
 792:	0e 94 0f 05 	call	0xa1e	; 0xa1e <strnlen>
 796:	4c 01       	movw	r8, r24
 798:	82 01       	movw	r16, r4
 79a:	f3 2d       	mov	r31, r3
 79c:	ff 77       	andi	r31, 0x7F	; 127
 79e:	3f 2e       	mov	r3, r31
 7a0:	16 c0       	rjmp	.+44     	; 0x7ce <vfprintf+0x188>
 7a2:	28 01       	movw	r4, r16
 7a4:	22 e0       	ldi	r18, 0x02	; 2
 7a6:	42 0e       	add	r4, r18
 7a8:	51 1c       	adc	r5, r1
 7aa:	f8 01       	movw	r30, r16
 7ac:	a0 80       	ld	r10, Z
 7ae:	b1 80       	ldd	r11, Z+1	; 0x01
 7b0:	36 fe       	sbrs	r3, 6
 7b2:	03 c0       	rjmp	.+6      	; 0x7ba <vfprintf+0x174>
 7b4:	69 2d       	mov	r22, r9
 7b6:	70 e0       	ldi	r23, 0x00	; 0
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <vfprintf+0x178>
 7ba:	6f ef       	ldi	r22, 0xFF	; 255
 7bc:	7f ef       	ldi	r23, 0xFF	; 255
 7be:	c5 01       	movw	r24, r10
 7c0:	0e 94 04 05 	call	0xa08	; 0xa08 <strnlen_P>
 7c4:	4c 01       	movw	r8, r24
 7c6:	f3 2d       	mov	r31, r3
 7c8:	f0 68       	ori	r31, 0x80	; 128
 7ca:	3f 2e       	mov	r3, r31
 7cc:	82 01       	movw	r16, r4
 7ce:	33 fc       	sbrc	r3, 3
 7d0:	1b c0       	rjmp	.+54     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7d2:	82 2d       	mov	r24, r2
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	88 16       	cp	r8, r24
 7d8:	99 06       	cpc	r9, r25
 7da:	b0 f4       	brcc	.+44     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7dc:	b6 01       	movw	r22, r12
 7de:	80 e2       	ldi	r24, 0x20	; 32
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	0e 94 1a 05 	call	0xa34	; 0xa34 <fputc>
 7e6:	2a 94       	dec	r2
 7e8:	f4 cf       	rjmp	.-24     	; 0x7d2 <vfprintf+0x18c>
 7ea:	f5 01       	movw	r30, r10
 7ec:	37 fc       	sbrc	r3, 7
 7ee:	85 91       	lpm	r24, Z+
 7f0:	37 fe       	sbrs	r3, 7
 7f2:	81 91       	ld	r24, Z+
 7f4:	5f 01       	movw	r10, r30
 7f6:	b6 01       	movw	r22, r12
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	0e 94 1a 05 	call	0xa34	; 0xa34 <fputc>
 7fe:	21 10       	cpse	r2, r1
 800:	2a 94       	dec	r2
 802:	21 e0       	ldi	r18, 0x01	; 1
 804:	82 1a       	sub	r8, r18
 806:	91 08       	sbc	r9, r1
 808:	81 14       	cp	r8, r1
 80a:	91 04       	cpc	r9, r1
 80c:	71 f7       	brne	.-36     	; 0x7ea <vfprintf+0x1a4>
 80e:	e8 c0       	rjmp	.+464    	; 0x9e0 <__stack+0xe1>
 810:	84 36       	cpi	r24, 0x64	; 100
 812:	11 f0       	breq	.+4      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 814:	89 36       	cpi	r24, 0x69	; 105
 816:	41 f5       	brne	.+80     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 818:	f8 01       	movw	r30, r16
 81a:	37 fe       	sbrs	r3, 7
 81c:	07 c0       	rjmp	.+14     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 81e:	60 81       	ld	r22, Z
 820:	71 81       	ldd	r23, Z+1	; 0x01
 822:	82 81       	ldd	r24, Z+2	; 0x02
 824:	93 81       	ldd	r25, Z+3	; 0x03
 826:	0c 5f       	subi	r16, 0xFC	; 252
 828:	1f 4f       	sbci	r17, 0xFF	; 255
 82a:	08 c0       	rjmp	.+16     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 82c:	60 81       	ld	r22, Z
 82e:	71 81       	ldd	r23, Z+1	; 0x01
 830:	07 2e       	mov	r0, r23
 832:	00 0c       	add	r0, r0
 834:	88 0b       	sbc	r24, r24
 836:	99 0b       	sbc	r25, r25
 838:	0e 5f       	subi	r16, 0xFE	; 254
 83a:	1f 4f       	sbci	r17, 0xFF	; 255
 83c:	f3 2d       	mov	r31, r3
 83e:	ff 76       	andi	r31, 0x6F	; 111
 840:	3f 2e       	mov	r3, r31
 842:	97 ff       	sbrs	r25, 7
 844:	09 c0       	rjmp	.+18     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 846:	90 95       	com	r25
 848:	80 95       	com	r24
 84a:	70 95       	com	r23
 84c:	61 95       	neg	r22
 84e:	7f 4f       	sbci	r23, 0xFF	; 255
 850:	8f 4f       	sbci	r24, 0xFF	; 255
 852:	9f 4f       	sbci	r25, 0xFF	; 255
 854:	f0 68       	ori	r31, 0x80	; 128
 856:	3f 2e       	mov	r3, r31
 858:	2a e0       	ldi	r18, 0x0A	; 10
 85a:	30 e0       	ldi	r19, 0x00	; 0
 85c:	a3 01       	movw	r20, r6
 85e:	0e 94 56 05 	call	0xaac	; 0xaac <__ultoa_invert>
 862:	88 2e       	mov	r8, r24
 864:	86 18       	sub	r8, r6
 866:	45 c0       	rjmp	.+138    	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
 868:	85 37       	cpi	r24, 0x75	; 117
 86a:	31 f4       	brne	.+12     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 86c:	23 2d       	mov	r18, r3
 86e:	2f 7e       	andi	r18, 0xEF	; 239
 870:	b2 2e       	mov	r11, r18
 872:	2a e0       	ldi	r18, 0x0A	; 10
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	25 c0       	rjmp	.+74     	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 878:	93 2d       	mov	r25, r3
 87a:	99 7f       	andi	r25, 0xF9	; 249
 87c:	b9 2e       	mov	r11, r25
 87e:	8f 36       	cpi	r24, 0x6F	; 111
 880:	c1 f0       	breq	.+48     	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
 882:	18 f4       	brcc	.+6      	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
 884:	88 35       	cpi	r24, 0x58	; 88
 886:	79 f0       	breq	.+30     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
 888:	b5 c0       	rjmp	.+362    	; 0x9f4 <__stack+0xf5>
 88a:	80 37       	cpi	r24, 0x70	; 112
 88c:	19 f0       	breq	.+6      	; 0x894 <__DATA_REGION_LENGTH__+0x94>
 88e:	88 37       	cpi	r24, 0x78	; 120
 890:	21 f0       	breq	.+8      	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
 892:	b0 c0       	rjmp	.+352    	; 0x9f4 <__stack+0xf5>
 894:	e9 2f       	mov	r30, r25
 896:	e0 61       	ori	r30, 0x10	; 16
 898:	be 2e       	mov	r11, r30
 89a:	b4 fe       	sbrs	r11, 4
 89c:	0d c0       	rjmp	.+26     	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
 89e:	fb 2d       	mov	r31, r11
 8a0:	f4 60       	ori	r31, 0x04	; 4
 8a2:	bf 2e       	mov	r11, r31
 8a4:	09 c0       	rjmp	.+18     	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
 8a6:	34 fe       	sbrs	r3, 4
 8a8:	0a c0       	rjmp	.+20     	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 8aa:	29 2f       	mov	r18, r25
 8ac:	26 60       	ori	r18, 0x06	; 6
 8ae:	b2 2e       	mov	r11, r18
 8b0:	06 c0       	rjmp	.+12     	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 8b2:	28 e0       	ldi	r18, 0x08	; 8
 8b4:	30 e0       	ldi	r19, 0x00	; 0
 8b6:	05 c0       	rjmp	.+10     	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 8b8:	20 e1       	ldi	r18, 0x10	; 16
 8ba:	30 e0       	ldi	r19, 0x00	; 0
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 8be:	20 e1       	ldi	r18, 0x10	; 16
 8c0:	32 e0       	ldi	r19, 0x02	; 2
 8c2:	f8 01       	movw	r30, r16
 8c4:	b7 fe       	sbrs	r11, 7
 8c6:	07 c0       	rjmp	.+14     	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
 8c8:	60 81       	ld	r22, Z
 8ca:	71 81       	ldd	r23, Z+1	; 0x01
 8cc:	82 81       	ldd	r24, Z+2	; 0x02
 8ce:	93 81       	ldd	r25, Z+3	; 0x03
 8d0:	0c 5f       	subi	r16, 0xFC	; 252
 8d2:	1f 4f       	sbci	r17, 0xFF	; 255
 8d4:	06 c0       	rjmp	.+12     	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
 8d6:	60 81       	ld	r22, Z
 8d8:	71 81       	ldd	r23, Z+1	; 0x01
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	0e 5f       	subi	r16, 0xFE	; 254
 8e0:	1f 4f       	sbci	r17, 0xFF	; 255
 8e2:	a3 01       	movw	r20, r6
 8e4:	0e 94 56 05 	call	0xaac	; 0xaac <__ultoa_invert>
 8e8:	88 2e       	mov	r8, r24
 8ea:	86 18       	sub	r8, r6
 8ec:	fb 2d       	mov	r31, r11
 8ee:	ff 77       	andi	r31, 0x7F	; 127
 8f0:	3f 2e       	mov	r3, r31
 8f2:	36 fe       	sbrs	r3, 6
 8f4:	0d c0       	rjmp	.+26     	; 0x910 <__stack+0x11>
 8f6:	23 2d       	mov	r18, r3
 8f8:	2e 7f       	andi	r18, 0xFE	; 254
 8fa:	a2 2e       	mov	r10, r18
 8fc:	89 14       	cp	r8, r9
 8fe:	58 f4       	brcc	.+22     	; 0x916 <__stack+0x17>
 900:	34 fe       	sbrs	r3, 4
 902:	0b c0       	rjmp	.+22     	; 0x91a <__stack+0x1b>
 904:	32 fc       	sbrc	r3, 2
 906:	09 c0       	rjmp	.+18     	; 0x91a <__stack+0x1b>
 908:	83 2d       	mov	r24, r3
 90a:	8e 7e       	andi	r24, 0xEE	; 238
 90c:	a8 2e       	mov	r10, r24
 90e:	05 c0       	rjmp	.+10     	; 0x91a <__stack+0x1b>
 910:	b8 2c       	mov	r11, r8
 912:	a3 2c       	mov	r10, r3
 914:	03 c0       	rjmp	.+6      	; 0x91c <__stack+0x1d>
 916:	b8 2c       	mov	r11, r8
 918:	01 c0       	rjmp	.+2      	; 0x91c <__stack+0x1d>
 91a:	b9 2c       	mov	r11, r9
 91c:	a4 fe       	sbrs	r10, 4
 91e:	0f c0       	rjmp	.+30     	; 0x93e <__stack+0x3f>
 920:	fe 01       	movw	r30, r28
 922:	e8 0d       	add	r30, r8
 924:	f1 1d       	adc	r31, r1
 926:	80 81       	ld	r24, Z
 928:	80 33       	cpi	r24, 0x30	; 48
 92a:	21 f4       	brne	.+8      	; 0x934 <__stack+0x35>
 92c:	9a 2d       	mov	r25, r10
 92e:	99 7e       	andi	r25, 0xE9	; 233
 930:	a9 2e       	mov	r10, r25
 932:	09 c0       	rjmp	.+18     	; 0x946 <__stack+0x47>
 934:	a2 fe       	sbrs	r10, 2
 936:	06 c0       	rjmp	.+12     	; 0x944 <__stack+0x45>
 938:	b3 94       	inc	r11
 93a:	b3 94       	inc	r11
 93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0x47>
 93e:	8a 2d       	mov	r24, r10
 940:	86 78       	andi	r24, 0x86	; 134
 942:	09 f0       	breq	.+2      	; 0x946 <__stack+0x47>
 944:	b3 94       	inc	r11
 946:	a3 fc       	sbrc	r10, 3
 948:	11 c0       	rjmp	.+34     	; 0x96c <__stack+0x6d>
 94a:	a0 fe       	sbrs	r10, 0
 94c:	06 c0       	rjmp	.+12     	; 0x95a <__stack+0x5b>
 94e:	b2 14       	cp	r11, r2
 950:	88 f4       	brcc	.+34     	; 0x974 <__stack+0x75>
 952:	28 0c       	add	r2, r8
 954:	92 2c       	mov	r9, r2
 956:	9b 18       	sub	r9, r11
 958:	0e c0       	rjmp	.+28     	; 0x976 <__stack+0x77>
 95a:	b2 14       	cp	r11, r2
 95c:	60 f4       	brcc	.+24     	; 0x976 <__stack+0x77>
 95e:	b6 01       	movw	r22, r12
 960:	80 e2       	ldi	r24, 0x20	; 32
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	0e 94 1a 05 	call	0xa34	; 0xa34 <fputc>
 968:	b3 94       	inc	r11
 96a:	f7 cf       	rjmp	.-18     	; 0x95a <__stack+0x5b>
 96c:	b2 14       	cp	r11, r2
 96e:	18 f4       	brcc	.+6      	; 0x976 <__stack+0x77>
 970:	2b 18       	sub	r2, r11
 972:	02 c0       	rjmp	.+4      	; 0x978 <__stack+0x79>
 974:	98 2c       	mov	r9, r8
 976:	21 2c       	mov	r2, r1
 978:	a4 fe       	sbrs	r10, 4
 97a:	10 c0       	rjmp	.+32     	; 0x99c <__stack+0x9d>
 97c:	b6 01       	movw	r22, r12
 97e:	80 e3       	ldi	r24, 0x30	; 48
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	0e 94 1a 05 	call	0xa34	; 0xa34 <fputc>
 986:	a2 fe       	sbrs	r10, 2
 988:	17 c0       	rjmp	.+46     	; 0x9b8 <__stack+0xb9>
 98a:	a1 fc       	sbrc	r10, 1
 98c:	03 c0       	rjmp	.+6      	; 0x994 <__stack+0x95>
 98e:	88 e7       	ldi	r24, 0x78	; 120
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	02 c0       	rjmp	.+4      	; 0x998 <__stack+0x99>
 994:	88 e5       	ldi	r24, 0x58	; 88
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	b6 01       	movw	r22, r12
 99a:	0c c0       	rjmp	.+24     	; 0x9b4 <__stack+0xb5>
 99c:	8a 2d       	mov	r24, r10
 99e:	86 78       	andi	r24, 0x86	; 134
 9a0:	59 f0       	breq	.+22     	; 0x9b8 <__stack+0xb9>
 9a2:	a1 fe       	sbrs	r10, 1
 9a4:	02 c0       	rjmp	.+4      	; 0x9aa <__stack+0xab>
 9a6:	8b e2       	ldi	r24, 0x2B	; 43
 9a8:	01 c0       	rjmp	.+2      	; 0x9ac <__stack+0xad>
 9aa:	80 e2       	ldi	r24, 0x20	; 32
 9ac:	a7 fc       	sbrc	r10, 7
 9ae:	8d e2       	ldi	r24, 0x2D	; 45
 9b0:	b6 01       	movw	r22, r12
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	0e 94 1a 05 	call	0xa34	; 0xa34 <fputc>
 9b8:	89 14       	cp	r8, r9
 9ba:	38 f4       	brcc	.+14     	; 0x9ca <__stack+0xcb>
 9bc:	b6 01       	movw	r22, r12
 9be:	80 e3       	ldi	r24, 0x30	; 48
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	0e 94 1a 05 	call	0xa34	; 0xa34 <fputc>
 9c6:	9a 94       	dec	r9
 9c8:	f7 cf       	rjmp	.-18     	; 0x9b8 <__stack+0xb9>
 9ca:	8a 94       	dec	r8
 9cc:	f3 01       	movw	r30, r6
 9ce:	e8 0d       	add	r30, r8
 9d0:	f1 1d       	adc	r31, r1
 9d2:	80 81       	ld	r24, Z
 9d4:	b6 01       	movw	r22, r12
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	0e 94 1a 05 	call	0xa34	; 0xa34 <fputc>
 9dc:	81 10       	cpse	r8, r1
 9de:	f5 cf       	rjmp	.-22     	; 0x9ca <__stack+0xcb>
 9e0:	22 20       	and	r2, r2
 9e2:	09 f4       	brne	.+2      	; 0x9e6 <__stack+0xe7>
 9e4:	42 ce       	rjmp	.-892    	; 0x66a <vfprintf+0x24>
 9e6:	b6 01       	movw	r22, r12
 9e8:	80 e2       	ldi	r24, 0x20	; 32
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	0e 94 1a 05 	call	0xa34	; 0xa34 <fputc>
 9f0:	2a 94       	dec	r2
 9f2:	f6 cf       	rjmp	.-20     	; 0x9e0 <__stack+0xe1>
 9f4:	f6 01       	movw	r30, r12
 9f6:	86 81       	ldd	r24, Z+6	; 0x06
 9f8:	97 81       	ldd	r25, Z+7	; 0x07
 9fa:	02 c0       	rjmp	.+4      	; 0xa00 <__stack+0x101>
 9fc:	8f ef       	ldi	r24, 0xFF	; 255
 9fe:	9f ef       	ldi	r25, 0xFF	; 255
 a00:	2b 96       	adiw	r28, 0x0b	; 11
 a02:	e2 e1       	ldi	r30, 0x12	; 18
 a04:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__epilogue_restores__>

00000a08 <strnlen_P>:
 a08:	fc 01       	movw	r30, r24
 a0a:	05 90       	lpm	r0, Z+
 a0c:	61 50       	subi	r22, 0x01	; 1
 a0e:	70 40       	sbci	r23, 0x00	; 0
 a10:	01 10       	cpse	r0, r1
 a12:	d8 f7       	brcc	.-10     	; 0xa0a <strnlen_P+0x2>
 a14:	80 95       	com	r24
 a16:	90 95       	com	r25
 a18:	8e 0f       	add	r24, r30
 a1a:	9f 1f       	adc	r25, r31
 a1c:	08 95       	ret

00000a1e <strnlen>:
 a1e:	fc 01       	movw	r30, r24
 a20:	61 50       	subi	r22, 0x01	; 1
 a22:	70 40       	sbci	r23, 0x00	; 0
 a24:	01 90       	ld	r0, Z+
 a26:	01 10       	cpse	r0, r1
 a28:	d8 f7       	brcc	.-10     	; 0xa20 <strnlen+0x2>
 a2a:	80 95       	com	r24
 a2c:	90 95       	com	r25
 a2e:	8e 0f       	add	r24, r30
 a30:	9f 1f       	adc	r25, r31
 a32:	08 95       	ret

00000a34 <fputc>:
 a34:	0f 93       	push	r16
 a36:	1f 93       	push	r17
 a38:	cf 93       	push	r28
 a3a:	df 93       	push	r29
 a3c:	fb 01       	movw	r30, r22
 a3e:	23 81       	ldd	r18, Z+3	; 0x03
 a40:	21 fd       	sbrc	r18, 1
 a42:	03 c0       	rjmp	.+6      	; 0xa4a <fputc+0x16>
 a44:	8f ef       	ldi	r24, 0xFF	; 255
 a46:	9f ef       	ldi	r25, 0xFF	; 255
 a48:	2c c0       	rjmp	.+88     	; 0xaa2 <fputc+0x6e>
 a4a:	22 ff       	sbrs	r18, 2
 a4c:	16 c0       	rjmp	.+44     	; 0xa7a <fputc+0x46>
 a4e:	46 81       	ldd	r20, Z+6	; 0x06
 a50:	57 81       	ldd	r21, Z+7	; 0x07
 a52:	24 81       	ldd	r18, Z+4	; 0x04
 a54:	35 81       	ldd	r19, Z+5	; 0x05
 a56:	42 17       	cp	r20, r18
 a58:	53 07       	cpc	r21, r19
 a5a:	44 f4       	brge	.+16     	; 0xa6c <fputc+0x38>
 a5c:	a0 81       	ld	r26, Z
 a5e:	b1 81       	ldd	r27, Z+1	; 0x01
 a60:	9d 01       	movw	r18, r26
 a62:	2f 5f       	subi	r18, 0xFF	; 255
 a64:	3f 4f       	sbci	r19, 0xFF	; 255
 a66:	31 83       	std	Z+1, r19	; 0x01
 a68:	20 83       	st	Z, r18
 a6a:	8c 93       	st	X, r24
 a6c:	26 81       	ldd	r18, Z+6	; 0x06
 a6e:	37 81       	ldd	r19, Z+7	; 0x07
 a70:	2f 5f       	subi	r18, 0xFF	; 255
 a72:	3f 4f       	sbci	r19, 0xFF	; 255
 a74:	37 83       	std	Z+7, r19	; 0x07
 a76:	26 83       	std	Z+6, r18	; 0x06
 a78:	14 c0       	rjmp	.+40     	; 0xaa2 <fputc+0x6e>
 a7a:	8b 01       	movw	r16, r22
 a7c:	ec 01       	movw	r28, r24
 a7e:	fb 01       	movw	r30, r22
 a80:	00 84       	ldd	r0, Z+8	; 0x08
 a82:	f1 85       	ldd	r31, Z+9	; 0x09
 a84:	e0 2d       	mov	r30, r0
 a86:	09 95       	icall
 a88:	89 2b       	or	r24, r25
 a8a:	e1 f6       	brne	.-72     	; 0xa44 <fputc+0x10>
 a8c:	d8 01       	movw	r26, r16
 a8e:	16 96       	adiw	r26, 0x06	; 6
 a90:	8d 91       	ld	r24, X+
 a92:	9c 91       	ld	r25, X
 a94:	17 97       	sbiw	r26, 0x07	; 7
 a96:	01 96       	adiw	r24, 0x01	; 1
 a98:	17 96       	adiw	r26, 0x07	; 7
 a9a:	9c 93       	st	X, r25
 a9c:	8e 93       	st	-X, r24
 a9e:	16 97       	sbiw	r26, 0x06	; 6
 aa0:	ce 01       	movw	r24, r28
 aa2:	df 91       	pop	r29
 aa4:	cf 91       	pop	r28
 aa6:	1f 91       	pop	r17
 aa8:	0f 91       	pop	r16
 aaa:	08 95       	ret

00000aac <__ultoa_invert>:
 aac:	fa 01       	movw	r30, r20
 aae:	aa 27       	eor	r26, r26
 ab0:	28 30       	cpi	r18, 0x08	; 8
 ab2:	51 f1       	breq	.+84     	; 0xb08 <__ultoa_invert+0x5c>
 ab4:	20 31       	cpi	r18, 0x10	; 16
 ab6:	81 f1       	breq	.+96     	; 0xb18 <__ultoa_invert+0x6c>
 ab8:	e8 94       	clt
 aba:	6f 93       	push	r22
 abc:	6e 7f       	andi	r22, 0xFE	; 254
 abe:	6e 5f       	subi	r22, 0xFE	; 254
 ac0:	7f 4f       	sbci	r23, 0xFF	; 255
 ac2:	8f 4f       	sbci	r24, 0xFF	; 255
 ac4:	9f 4f       	sbci	r25, 0xFF	; 255
 ac6:	af 4f       	sbci	r26, 0xFF	; 255
 ac8:	b1 e0       	ldi	r27, 0x01	; 1
 aca:	3e d0       	rcall	.+124    	; 0xb48 <__ultoa_invert+0x9c>
 acc:	b4 e0       	ldi	r27, 0x04	; 4
 ace:	3c d0       	rcall	.+120    	; 0xb48 <__ultoa_invert+0x9c>
 ad0:	67 0f       	add	r22, r23
 ad2:	78 1f       	adc	r23, r24
 ad4:	89 1f       	adc	r24, r25
 ad6:	9a 1f       	adc	r25, r26
 ad8:	a1 1d       	adc	r26, r1
 ada:	68 0f       	add	r22, r24
 adc:	79 1f       	adc	r23, r25
 ade:	8a 1f       	adc	r24, r26
 ae0:	91 1d       	adc	r25, r1
 ae2:	a1 1d       	adc	r26, r1
 ae4:	6a 0f       	add	r22, r26
 ae6:	71 1d       	adc	r23, r1
 ae8:	81 1d       	adc	r24, r1
 aea:	91 1d       	adc	r25, r1
 aec:	a1 1d       	adc	r26, r1
 aee:	20 d0       	rcall	.+64     	; 0xb30 <__ultoa_invert+0x84>
 af0:	09 f4       	brne	.+2      	; 0xaf4 <__ultoa_invert+0x48>
 af2:	68 94       	set
 af4:	3f 91       	pop	r19
 af6:	2a e0       	ldi	r18, 0x0A	; 10
 af8:	26 9f       	mul	r18, r22
 afa:	11 24       	eor	r1, r1
 afc:	30 19       	sub	r19, r0
 afe:	30 5d       	subi	r19, 0xD0	; 208
 b00:	31 93       	st	Z+, r19
 b02:	de f6       	brtc	.-74     	; 0xaba <__ultoa_invert+0xe>
 b04:	cf 01       	movw	r24, r30
 b06:	08 95       	ret
 b08:	46 2f       	mov	r20, r22
 b0a:	47 70       	andi	r20, 0x07	; 7
 b0c:	40 5d       	subi	r20, 0xD0	; 208
 b0e:	41 93       	st	Z+, r20
 b10:	b3 e0       	ldi	r27, 0x03	; 3
 b12:	0f d0       	rcall	.+30     	; 0xb32 <__ultoa_invert+0x86>
 b14:	c9 f7       	brne	.-14     	; 0xb08 <__ultoa_invert+0x5c>
 b16:	f6 cf       	rjmp	.-20     	; 0xb04 <__ultoa_invert+0x58>
 b18:	46 2f       	mov	r20, r22
 b1a:	4f 70       	andi	r20, 0x0F	; 15
 b1c:	40 5d       	subi	r20, 0xD0	; 208
 b1e:	4a 33       	cpi	r20, 0x3A	; 58
 b20:	18 f0       	brcs	.+6      	; 0xb28 <__ultoa_invert+0x7c>
 b22:	49 5d       	subi	r20, 0xD9	; 217
 b24:	31 fd       	sbrc	r19, 1
 b26:	40 52       	subi	r20, 0x20	; 32
 b28:	41 93       	st	Z+, r20
 b2a:	02 d0       	rcall	.+4      	; 0xb30 <__ultoa_invert+0x84>
 b2c:	a9 f7       	brne	.-22     	; 0xb18 <__ultoa_invert+0x6c>
 b2e:	ea cf       	rjmp	.-44     	; 0xb04 <__ultoa_invert+0x58>
 b30:	b4 e0       	ldi	r27, 0x04	; 4
 b32:	a6 95       	lsr	r26
 b34:	97 95       	ror	r25
 b36:	87 95       	ror	r24
 b38:	77 95       	ror	r23
 b3a:	67 95       	ror	r22
 b3c:	ba 95       	dec	r27
 b3e:	c9 f7       	brne	.-14     	; 0xb32 <__ultoa_invert+0x86>
 b40:	00 97       	sbiw	r24, 0x00	; 0
 b42:	61 05       	cpc	r22, r1
 b44:	71 05       	cpc	r23, r1
 b46:	08 95       	ret
 b48:	9b 01       	movw	r18, r22
 b4a:	ac 01       	movw	r20, r24
 b4c:	0a 2e       	mov	r0, r26
 b4e:	06 94       	lsr	r0
 b50:	57 95       	ror	r21
 b52:	47 95       	ror	r20
 b54:	37 95       	ror	r19
 b56:	27 95       	ror	r18
 b58:	ba 95       	dec	r27
 b5a:	c9 f7       	brne	.-14     	; 0xb4e <__ultoa_invert+0xa2>
 b5c:	62 0f       	add	r22, r18
 b5e:	73 1f       	adc	r23, r19
 b60:	84 1f       	adc	r24, r20
 b62:	95 1f       	adc	r25, r21
 b64:	a0 1d       	adc	r26, r0
 b66:	08 95       	ret

00000b68 <__prologue_saves__>:
 b68:	2f 92       	push	r2
 b6a:	3f 92       	push	r3
 b6c:	4f 92       	push	r4
 b6e:	5f 92       	push	r5
 b70:	6f 92       	push	r6
 b72:	7f 92       	push	r7
 b74:	8f 92       	push	r8
 b76:	9f 92       	push	r9
 b78:	af 92       	push	r10
 b7a:	bf 92       	push	r11
 b7c:	cf 92       	push	r12
 b7e:	df 92       	push	r13
 b80:	ef 92       	push	r14
 b82:	ff 92       	push	r15
 b84:	0f 93       	push	r16
 b86:	1f 93       	push	r17
 b88:	cf 93       	push	r28
 b8a:	df 93       	push	r29
 b8c:	cd b7       	in	r28, 0x3d	; 61
 b8e:	de b7       	in	r29, 0x3e	; 62
 b90:	ca 1b       	sub	r28, r26
 b92:	db 0b       	sbc	r29, r27
 b94:	0f b6       	in	r0, 0x3f	; 63
 b96:	f8 94       	cli
 b98:	de bf       	out	0x3e, r29	; 62
 b9a:	0f be       	out	0x3f, r0	; 63
 b9c:	cd bf       	out	0x3d, r28	; 61
 b9e:	09 94       	ijmp

00000ba0 <__epilogue_restores__>:
 ba0:	2a 88       	ldd	r2, Y+18	; 0x12
 ba2:	39 88       	ldd	r3, Y+17	; 0x11
 ba4:	48 88       	ldd	r4, Y+16	; 0x10
 ba6:	5f 84       	ldd	r5, Y+15	; 0x0f
 ba8:	6e 84       	ldd	r6, Y+14	; 0x0e
 baa:	7d 84       	ldd	r7, Y+13	; 0x0d
 bac:	8c 84       	ldd	r8, Y+12	; 0x0c
 bae:	9b 84       	ldd	r9, Y+11	; 0x0b
 bb0:	aa 84       	ldd	r10, Y+10	; 0x0a
 bb2:	b9 84       	ldd	r11, Y+9	; 0x09
 bb4:	c8 84       	ldd	r12, Y+8	; 0x08
 bb6:	df 80       	ldd	r13, Y+7	; 0x07
 bb8:	ee 80       	ldd	r14, Y+6	; 0x06
 bba:	fd 80       	ldd	r15, Y+5	; 0x05
 bbc:	0c 81       	ldd	r16, Y+4	; 0x04
 bbe:	1b 81       	ldd	r17, Y+3	; 0x03
 bc0:	aa 81       	ldd	r26, Y+2	; 0x02
 bc2:	b9 81       	ldd	r27, Y+1	; 0x01
 bc4:	ce 0f       	add	r28, r30
 bc6:	d1 1d       	adc	r29, r1
 bc8:	0f b6       	in	r0, 0x3f	; 63
 bca:	f8 94       	cli
 bcc:	de bf       	out	0x3e, r29	; 62
 bce:	0f be       	out	0x3f, r0	; 63
 bd0:	cd bf       	out	0x3d, r28	; 61
 bd2:	ed 01       	movw	r28, r26
 bd4:	08 95       	ret

00000bd6 <_exit>:
 bd6:	f8 94       	cli

00000bd8 <__stop_program>:
 bd8:	ff cf       	rjmp	.-2      	; 0xbd8 <__stop_program>
